// Generated by CoffeeScript 2.0.0
// RiveScript.js

// This code is released under the MIT License.
// See the "LICENSE" file for more information.

// http://www.rivescript.com/
"use strict";
var CoffeeObjectHandler, coffee;

coffee = require("coffeescript");

/**
CoffeeObjectHandler (RiveScript master)

CoffeeScript Language Support for RiveScript Macros. This language is not
enabled by default; to enable CoffeeScript object macros:

```coffeescript
CoffeeObjectHandler = require "rivescript/lang/coffee"
bot.setHandler "coffee", new CoffeeObjectHandler
```
*/
CoffeeObjectHandler = class CoffeeObjectHandler {
	constructor(master) {
		this._master = master;
		this._objects = {};
	}

	/**
	void load (string name, string[] code)

	Called by the RiveScript object to load CoffeeScript code.
	*/
	load(name, code) {
		var e, source;
		// We need to make a dynamic CoffeeScript function.
		source = "this._objects[\"" + name + "\"] = function(rs, args) {\n" + coffee.compile(code.join("\n"), {
			bare: true
		}) + "}\n";
		try {
			return eval(source);
		} catch (error) {
			e = error;
			return this._master.warn("Error evaluating CoffeeScript object: " + e.message);
		}
	}

	/**
	string call (RiveScript rs, string name, string[] fields)

	Called by the RiveScript object to execute CoffeeScript code.
	*/
	call(rs, name, fields, scope) {
		var e, func, reply;
		// We have it?
		if (!this._objects[name]) {
			return this._master.errors.objectNotFound;
		}
		// Call the dynamic method.
		func = this._objects[name];
		reply = "";
		try {
			reply = func.call(scope, rs, fields);
		} catch (error) {
			e = error;
			reply = `[ERR: Error when executing CoffeeScript object: ${e.message}]`;
		}
		// Allow undefined responses.
		if (reply === void 0) {
			reply = "";
		}
		return reply;
	}

};

module.exports = CoffeeObjectHandler;
