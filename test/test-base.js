// Generated by CoffeeScript 2.0.0
// Utility functions for the unit tests.
let RiveScript

let TestCase

// Babel polyfill so the tests build and run on Node <= 6.
require("babel-polyfill")

RiveScript = require("../lib/rivescript")

/**
Base class for use with all test cases. Initializes a new RiveScript bot
with a starting reply base and gets it ready for reply requests.

@param test: The nodeunit test object.
@param code: Initial source code to load (be mindful of newlines!)
@param opts: Additional options to pass to RiveScript.
*/
TestCase = {
  constructor(test, code, opts) {
    this.test = test
    this.rs = new RiveScript(opts)
    this.username = "localuser"
    this.extend(code)
  }

  /**
  Stream additional code into the bot.

  @param code: RiveScript document source code.
  */
  const extend = (code) => {
    this.rs.stream(code)
    return this.rs.sortReplies()
  }

  /**
  Reply assertion: check if the answer to the message is what you expected.

  @param message: The user's input message.
  @param expected: The expected response.
  */
  const reply = async(message, expected) => {
    let reply;
    reply = (await this.rs.reply(this.username, message));
    return this.test.equal(reply, expected);
  }

  const replyRandom = async(message, expected) {
      let expect
      let i
      let len
      let reply
      reply = (await this.rs.reply(this.username, message));
      for (i = 0, len = expected.length; i < len; i++) {
        expect = expected[i]
        if (reply === expect) {
          this.test.ok(true, "Reply matched one of the expected random outputs.")
          return
        }
      }
      return this.test.ok(false, `Reply (${reply}) did not match any of the expected outputs.`)
    },

    /**
    User variable assertion.

    @param name: The variable name.
    @param expected: The expected value of that name.
    */
    const uservar = async(name, expected) {
        let value
        this.rs.getUservar(this.username, name).then((value) => {
          return this.test.equal(value, expected);
        })
      },
}
export default TestCase
