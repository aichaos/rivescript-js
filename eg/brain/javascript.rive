// JavaScript Object Macro Examples

! version = 2.0

// <call>setvar $username $key $value</call>
// Set a user variable for $username.
// Equivalent to <set $key=$value> but for a specific username.
> object setvar javascript
	// Example of how to get the current user's ID and set
	// variables for them.
	var uid = rs.currentUser();
	var name  = args.shift();
	var value = args.join(" ");
	rs.setUservar(uid, name, value);
< object

// <call>add $a $b</call>
// Adds two integers and returns the result.
> object add javascript
	// Demonstrats that JS objects can return numbers.
	var a = parseInt(args[0]);
	var b = parseInt(args[1]);
	return a + b;
< object

// <call>await-me $timeout $message</call>
// Resolves $message after $timeout seconds.
> object await-me javascript
	var timeout = args[0];
	var message = args[1];

	// Example of an asynchronous object macro which returns a promise instead
	// of a string.
	return new Promise(function(resolve, reject) {
		setTimeout(function() {
			resolve(message);
		}, timeout*1000);
	});
< object

// <call>wait-limited $timeout $maxTimeout</call>
// If the $timeout > $maxTimeout, it resolves "too long" immediately.
// Otherwise it waits $timeout seconds and resolves "done"
> object wait-limited javascript
	var timeout = parseInt(args[0]);
	var max     = parseInt(args[1]);

	return new Promise(function(resolve, reject) {
		if (timeout > max) {
			resolve("too long");
		} else {
			setTimeout(function() {
				resolve("done");
			}, timeout*1000);
		}
	});
< object

+ add # and #
- <star1> + <star2> = <call>add <star1> <star2></call>

+ javascript set * to *
- Set user variable <star1> to <star2>.<call>setvar <star1> <star2></call>

+ wait # seconds
- <call>await-me <star> "You waited <star> seconds for this response!"</call>

+ how long would i wait
* <call>await-me 1 1</call> == 2 => One second.
* <call>await-me 2 2</call> == 2 => Two seconds.
* <call>await-me 3 3</call> == 2 => Three seconds.
- I can't figure that out.

+ can you wait # seconds
* <call>wait-limited <star> 6</call> == done => I can!
- No the longest I'll wait is 6 seconds.
